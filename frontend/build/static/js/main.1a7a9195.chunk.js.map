{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","messages","setMessages","_useState5","_useState6","username","setUserName","_useState7","_useState8","typingName","setTypingName","_useState9","_useState10","socket","useRef","typstyle","current","display","position","left","bottom","zIndex","useEffect","io","window","location","host","transports","on","login","scrollTo","top","document","body","scrollHeight","behavior","prevMessage","concat","querySelector","scrollIntoView","name","style","setTimeout","listener","messageId","length","id","emit","removeListener","react_default","a","createElement","onSubmit","e","preventDefault","message","trim","alert","map","_ref","createdAt","className","key","moment","format","onKeyDown","value","placeholder","onChange","target","htmlFor","href","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a7a9195.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport moment from 'moment';\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUserName] = useState('');\n  const [typingName, setTypingName] = useState('');\n  const [room, setRoom] = useState('room1');\n\n\n  const socket = useRef();\n  const typstyle = useRef();\n\n  typstyle.current = { display: 'none', position: 'fixed', left: 0, bottom: '72px', zIndex: 222};\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const message = text.trim();\n    if (!message) {\n      return;\n    }\n\n    const name = username.trim();\n\n    if (!username) {\n      alert('Авторизуйтесь!');\n      return;\n    }\n\n\n    socket.current.emit('messages', {name, message});\n    setText('');\n    document.querySelector('form').scrollIntoView(false);\n  };\n\n\n\n\n  useEffect(() => {\n    socket.current = io(window.location.host, { transports: ['websocket']});\n\n    socket.current.on('login', login => {\n      setUserName(login);\n    });\n\n    socket.current.on('messages', messages => {\n      window.scrollTo({\n        top: document.body.scrollHeight,\n        behavior: 'smooth'\n      });\n\n      setMessages(prevMessage => prevMessage.concat(messages));\n      document.querySelector('form').scrollIntoView(false);\n    });\n\n    socket.current.on('typing', (name) => {\n      setTypingName(name);\n      document.querySelector('#typ').style.display = 'inline';\n      setTimeout(() => {document.querySelector('#typ').style.display = 'none';}, 100)\n    });\n\n  }, []);\n\n  useEffect(() => {\n    const listener = () => {\n\n\n      const messageId = messages.length ? messages[messages.length - 1].id : null;\n\n      socket.current.emit('getMessages', messageId);\n    };\n\n    socket.current.on('connect', listener);\n\n    return () => socket.current.removeListener('connect', listener);\n  }, [messages]);\n\n\n\n    return (<div>\n      {\n        username ?\n            <div>\n              <form onSubmit={onSubmit}>\n                {messages.map(({ id, name, message, createdAt }) => (\n                    <div className=\"message\" key={id}>\n                      <div>\n                        <span className='username'>{name}: </span>\n                        {message}\n                        <span className=\"timestamp\">{moment(createdAt).format('hh:mm')}</span>\n                      </div>\n                    </div>\n                ))}\n                <span id=\"typ\" style={typstyle.current}>{typingName ? typingName : 'Кто-то'} печатает...</span>\n                <input className=\"input-chat\" onKeyDown={() => socket.current.emit('typing', username)} value={text} placeholder=\"Напечатайте и Enter\"  onChange={e => setText(e.target.value)} />\n              </form>\n\n\n\n              <div className=\"input-name\" >\n                <label htmlFor=\"name\">Имя: </label>\n                <p>{username}</p>\n                <a href=\"/logout\">Logout</a>\n\n              </div>\n\n              {/*<ul className=\"rooms\">*/}\n              {/*  <li>*/}\n              {/*    <input id=\"room1\" name=\"room\" value=\"room1\" type=\"radio\" checked onChange={e=>setRoom(e.target.id)}/>*/}\n              {/*    <label htmlFor=\"room1\">Room#1</label>*/}\n              {/*  </li>*/}\n              {/*  <li>*/}\n              {/*    <input id=\"room2\" name=\"room\" value=\"room2\" type=\"radio\" onChange={e=>setRoom(e.target.id)}/>*/}\n              {/*    <label htmlFor=\"room2\">Room#2</label>*/}\n              {/*  </li>*/}\n              {/*  <li>*/}\n              {/*    <input id=\"room3\" name=\"room\" value=\"room3\" type=\"radio\" onChange={e=>setRoom(e.target.id)}/>*/}\n              {/*    <label htmlFor=\"room3\">Room#3</label>*/}\n              {/*  </li>*/}\n              {/*</ul>*/}\n            </div>\n            :\n            <div className=\"register\">\n                <h1>Авторизуйтесь!</h1>\n                <a href=\"/login\">Go to login!</a>\n                <a href=\"/registration\">Зарегистрироваться!</a>\n            </div>\n\n\n\n}\n    </div>)};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}